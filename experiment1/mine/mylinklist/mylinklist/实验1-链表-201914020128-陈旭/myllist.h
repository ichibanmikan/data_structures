#ifndef MYLLIST
#define MYLLIST

template <typename E> class myllist
{
    private:
        void operator =(const myllist&) {}      // Protect assignment
        myllist(const myllist&) {}           // Protect copy constructor
    public:
        myllist () {}; //ï¿½ï¿½ï¿½ìº¯ï¿½ï¿½
        virtual ~myllist() {}; //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
        virtual void next() = 0;
        virtual int length() const = 0; //ï¿½ï¿½ï¿½Øµï¿½Ç°ï¿½ï¿½ï¿½Ô±ï¿½Ôªï¿½ØµÄ¸ï¿½ï¿½ï¿½
        virtual void insert(const E& it) = 0; //ï¿½Úµï¿½Ç°Î»ï¿½Ã²ï¿½ï¿½ï¿½Ò»ï¿½ï¿½Ôªï¿½ï¿½
        virtual void clear () = 0; //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ô±ï¿½ï¿½Ðµï¿½ï¿½ï¿½ï¿½ï¿?1ï¿?7
        virtual void append (const E& it) = 0; //Î²ï¿½ï¿½Ò»ï¿½ï¿½Ôªï¿½ï¿½
        virtual E erase () = 0; //É¾ï¿½ï¿½ï¿½ï¿½ï¿½Ô±ï¿½ï¿½Ðµï¿½Ç°Ôªï¿½Ø²ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Îªï¿½ï¿½ï¿½ï¿½Öµ
        // virtual E poserase (int& pos) = 0; //É¾ï¿½ï¿½ï¿½ï¿½ï¿½Ô±ï¿½ï¿½ï¿½Ö¸ï¿½ï¿½Î»ï¿½ï¿½Ôªï¿½ï¿½
        virtual void movetostart () = 0; //ï¿½ï¿½ï¿½ï¿½Ç°Î»ï¿½ï¿½ï¿½Æ¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ô±ï¿½ï¿½ï¿½Í·
        virtual void movetoend () = 0; //ï¿½ï¿½ï¿½ï¿½Ç°Î»ï¿½ï¿½ï¿½Æ¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ô±ï¿½Ä©Î²
        virtual void prev () = 0; //ï¿½ï¿½ï¿½ï¿½Ç°Î»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Æ¶ï¿½Ò»Î»
        virtual int currpos () = 0; //ï¿½ï¿½ï¿½Øµï¿½Ç°Î»ï¿½ï¿½
        virtual void setpos(int &pos) = 0;//ï¿½ï¿½Ö¸ï¿½ï¿½Î»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Îªï¿½ï¿½Ç°Î»ï¿½ï¿½
        virtual const E& getvalue() = 0; //ï¿½ï¿½ï¿½Øµï¿½Ç°Ôªï¿½ï¿½Öµ
        virtual void fordisplay () = 0;//Ñ­ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ô?1ï¿?7ï¿½Øµï¿½Öµ
        // virtual void setorder() = 0;
};

#endif
